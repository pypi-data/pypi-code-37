from bmi import Bmi


class SensibleBmi(Bmi):
    @property
    def name(self):
        return self.get_component_name()

    @property
    def input_var_names(self):
        return self.get_input_var_names()

    @property
    def output_var_names(self):
        return self.get_output_var_names()

    @property
    def start_time(self):
        return self.get_start_time()

    @property
    def end_time(self):
        return self.get_end_time()

    @property
    def time(self):
        return self.get_current_time()

    @property
    def time_step(self):
        return self.get_time_step()

    @property
    def time_units(self):
        return self.get_time_units()

    def grid_shape(self, grid):
        return tuple(
            self.get_grid_shape(grid, np.empty(self.get_grid_rank(grid), dtype=int))
        )

    def grid_spacing(self, grid):
        return tuple(
            self.get_grid_spacing(grid, np.empty(self.get_grid_rank(grid), dtype=float))
        )

    def grid_origin(self, grid):
        return tuple(
            self.get_grid_origin(grid, np.empty(self.get_grid_rank(grid), dtype=float))
        )

    def value(self, name, out=None):
        if out is None:
            out = self.empty_var_array(name)
        out[:] = self.get_value(name, out)
        return out

    def empty_var_array(self, name):
        return np.empty(self.get_var_nbytes(name), dtype=np.uint8).view(
            dtype=self.get_var_type(name)
        )


def sensible_bmi(bmi):
    class _Bmi(bmi, SensibleBmi):
        pass

    _Bmi.__name__ = bmi.__name__
    _Bmi.__doc__ = bmi.__doc__
    bmi.__name__ = "_" + bmi.__name__

    return _Bmi


